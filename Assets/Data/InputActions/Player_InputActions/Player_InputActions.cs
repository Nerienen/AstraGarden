//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Data/InputActions/Player_InputActions/Player_InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_InputActions"",
    ""maps"": [
        {
            ""name"": ""FirstPersonCharacter_ActionMap"",
            ""id"": ""945d18ff-be0c-4804-9b50-51954f5b832a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""0215707d-6945-4590-9b14-33356ee19ca2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Charge"",
                    ""type"": ""Button"",
                    ""id"": ""8be70f1b-14f6-4bb8-93bb-5315d2c4e938"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""717689a7-7e24-4bdb-8ff7-7d32b16ab4b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""80e9f62c-f547-4845-93b6-78d88fc2ceb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""1b5bec10-0cf4-4389-97e4-d8a618bb4960"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Inspect"",
                    ""type"": ""Button"",
                    ""id"": ""f8326c92-b697-4222-a6c2-cb7b3af57363"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""b433e8e5-a188-4b35-8209-47c81825acf4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""d8e5ac8c-312b-498f-9646-8c6564af7328"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8a321076-81bc-4596-825e-8baa08434624"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21e2261f-f369-4935-88ff-ca398ffa8c35"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""047abf18-c723-4db1-812a-c279fe099dd6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f77422c4-2677-49d7-b80d-fb0d21b0f58e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eb7ab8fb-d9a4-453c-bb96-747f2f352d7c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8ffe63d6-a585-402f-b8e6-82241fabba78"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4d4ff9a-2e44-41b4-a262-ef6642e1293b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddb5f90f-cf8d-4aca-98e7-8018bf8a22a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c5da21f-7e7a-44c7-9c85-2076df4512f3"",
                    ""path"": ""<HID::Logitech Logitech Dual Action>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac731184-1e9f-432a-a4b1-5eb77e1ac1b6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2281a31d-1ca4-4ad3-8ea5-83b9bc7aaa60"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3f9c62a-2b24-4ca8-90f0-a4bd470b0e40"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a5e7dab-3b9b-41f3-9bbc-502c62459abe"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e569c73-fd58-46cc-bec6-b7241926d3c7"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5cde44b-6095-45a9-8087-49eef82ce545"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75386891-bc4b-4fee-81b1-09a4125f9799"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FirstPersonCharacter_ActionMap
        m_FirstPersonCharacter_ActionMap = asset.FindActionMap("FirstPersonCharacter_ActionMap", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Move = m_FirstPersonCharacter_ActionMap.FindAction("Move", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Charge = m_FirstPersonCharacter_ActionMap.FindAction("Charge", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Fire = m_FirstPersonCharacter_ActionMap.FindAction("Fire", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Interact = m_FirstPersonCharacter_ActionMap.FindAction("Interact", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Look = m_FirstPersonCharacter_ActionMap.FindAction("Look", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Inspect = m_FirstPersonCharacter_ActionMap.FindAction("Inspect", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Cancel = m_FirstPersonCharacter_ActionMap.FindAction("Cancel", throwIfNotFound: true);
        m_FirstPersonCharacter_ActionMap_Scroll = m_FirstPersonCharacter_ActionMap.FindAction("Scroll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPersonCharacter_ActionMap
    private readonly InputActionMap m_FirstPersonCharacter_ActionMap;
    private List<IFirstPersonCharacter_ActionMapActions> m_FirstPersonCharacter_ActionMapActionsCallbackInterfaces = new List<IFirstPersonCharacter_ActionMapActions>();
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Move;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Charge;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Fire;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Interact;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Look;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Inspect;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Cancel;
    private readonly InputAction m_FirstPersonCharacter_ActionMap_Scroll;
    public struct FirstPersonCharacter_ActionMapActions
    {
        private @Player_InputActions m_Wrapper;
        public FirstPersonCharacter_ActionMapActions(@Player_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FirstPersonCharacter_ActionMap_Move;
        public InputAction @Charge => m_Wrapper.m_FirstPersonCharacter_ActionMap_Charge;
        public InputAction @Fire => m_Wrapper.m_FirstPersonCharacter_ActionMap_Fire;
        public InputAction @Interact => m_Wrapper.m_FirstPersonCharacter_ActionMap_Interact;
        public InputAction @Look => m_Wrapper.m_FirstPersonCharacter_ActionMap_Look;
        public InputAction @Inspect => m_Wrapper.m_FirstPersonCharacter_ActionMap_Inspect;
        public InputAction @Cancel => m_Wrapper.m_FirstPersonCharacter_ActionMap_Cancel;
        public InputAction @Scroll => m_Wrapper.m_FirstPersonCharacter_ActionMap_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonCharacter_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonCharacter_ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IFirstPersonCharacter_ActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstPersonCharacter_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstPersonCharacter_ActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Charge.started += instance.OnCharge;
            @Charge.performed += instance.OnCharge;
            @Charge.canceled += instance.OnCharge;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Inspect.started += instance.OnInspect;
            @Inspect.performed += instance.OnInspect;
            @Inspect.canceled += instance.OnInspect;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
        }

        private void UnregisterCallbacks(IFirstPersonCharacter_ActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Charge.started -= instance.OnCharge;
            @Charge.performed -= instance.OnCharge;
            @Charge.canceled -= instance.OnCharge;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Inspect.started -= instance.OnInspect;
            @Inspect.performed -= instance.OnInspect;
            @Inspect.canceled -= instance.OnInspect;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
        }

        public void RemoveCallbacks(IFirstPersonCharacter_ActionMapActions instance)
        {
            if (m_Wrapper.m_FirstPersonCharacter_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstPersonCharacter_ActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstPersonCharacter_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstPersonCharacter_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstPersonCharacter_ActionMapActions @FirstPersonCharacter_ActionMap => new FirstPersonCharacter_ActionMapActions(this);
    public interface IFirstPersonCharacter_ActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCharge(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInspect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Data/InputActions/GameplayUI_InputActions/GameplayUI_InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayUI_InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayUI_InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayUI_InputActions"",
    ""maps"": [
        {
            ""name"": ""GameplayUI_ActionMap"",
            ""id"": ""237a6b34-04de-42be-9dc9-8cb0e549516c"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5f8911f8-31cf-4078-8391-b033925c628a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""377cabf7-4381-41d6-bb17-f2ca8a88bd78"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayUI_ActionMap
        m_GameplayUI_ActionMap = asset.FindActionMap("GameplayUI_ActionMap", throwIfNotFound: true);
        m_GameplayUI_ActionMap_Cancel = m_GameplayUI_ActionMap.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayUI_ActionMap
    private readonly InputActionMap m_GameplayUI_ActionMap;
    private List<IGameplayUI_ActionMapActions> m_GameplayUI_ActionMapActionsCallbackInterfaces = new List<IGameplayUI_ActionMapActions>();
    private readonly InputAction m_GameplayUI_ActionMap_Cancel;
    public struct GameplayUI_ActionMapActions
    {
        private @GameplayUI_InputActions m_Wrapper;
        public GameplayUI_ActionMapActions(@GameplayUI_InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cancel => m_Wrapper.m_GameplayUI_ActionMap_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_GameplayUI_ActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayUI_ActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayUI_ActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayUI_ActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayUI_ActionMapActionsCallbackInterfaces.Add(instance);
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IGameplayUI_ActionMapActions instance)
        {
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IGameplayUI_ActionMapActions instance)
        {
            if (m_Wrapper.m_GameplayUI_ActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayUI_ActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayUI_ActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayUI_ActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayUI_ActionMapActions @GameplayUI_ActionMap => new GameplayUI_ActionMapActions(this);
    public interface IGameplayUI_ActionMapActions
    {
        void OnCancel(InputAction.CallbackContext context);
    }
}
